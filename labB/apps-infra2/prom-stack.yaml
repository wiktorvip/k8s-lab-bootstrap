apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: infra2
  source:
    chart: kube-prometheus-stack
    repoURL: https://prometheus-community.github.io/helm-charts
    targetRevision: 65.1.1
    helm:
      releaseName: kube-prometheus-stack
      values: |
         alertmanager:
           enabled: true
           service:
             type: NodePort
             nodePort: 30903
           config:
             global:
               resolve_timeout: 5m
               slack_api_url: "https://hooks.slack.com/services/XXX"
             route:
               group_by: ['job']
               group_wait: 30s
               group_interval: 5m
               repeat_interval: 12h
               #receiver: 'slack'
               routes:
               - match:
                   alertname: DeadMansSwitch
                 receiver: 'null'
               - match:
                 receiver: 'slack'
                 continue: true
             receivers:
             - name: 'null'
             - name: 'slack'
               slack_configs:
               - channel: '#alers'
                 send_resolved: false
                 title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
                 text: >-
                   {{ range .Alerts }}
                     *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}`
                     *Description:* {{ .Annotations.description }}
                     *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:> *Runbook:* <{{ .Annotations.runbook }}|:spiral_note_pad:>
                     *Details:*
                     {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                     {{ end }}
                   {{ end }}
         defaultRules:
           create: true
           rules:
             etcd: false
         grafana:
           enabled: true
           service:
             type: NodePort
             nodePort: 30998
           adminUser: admin
           adminPassword: admin123
           additionalDataSources:
           - access: proxy
             isDefault: false
             name: loki
             orgId: 1
             type: loki
             url: http://loki-stack.loki-system:3100
             version: 1
         kubeEtcd:
           enabled: false
         kubeScheduler:
           enabled: false
         prometheus:
           enabled: true
           service:
             type: NodePort
             nodePort: 30090
           prometheusSpec:
             serviceMonitorSelectorNilUsesHelmValues: false
             serviceMonitorSelector: {}
             serviceMonitorNamespaceSelector: {}
             storageSpec:
               volumeClaimTemplate:
                 spec:
                   accessModes:
                     - ReadWriteOnce
                   resources:
                     requests:
                       storage: 5Gi
                   storageClassName: nfs-storage
         prometheusOperator:
           enabled: true
  destination:
    name: in-cluster
    namespace: monitoring-system
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - ServerSideApply=true